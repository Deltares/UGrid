//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class UGridState : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal UGridState(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UGridState obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(UGridState obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~UGridState() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          UGridPINVOKE.delete_UGridState(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public UGridState() : this(UGridPINVOKE.new_UGridState__SWIG_0(), true) {
  }

  public UGridState(SWIGTYPE_p_std__shared_ptrT_netCDF__NcFile_t nc_file) : this(UGridPINVOKE.new_UGridState__SWIG_1(SWIGTYPE_p_std__shared_ptrT_netCDF__NcFile_t.getCPtr(nc_file)), true) {
    if (UGridPINVOKE.SWIGPendingException.Pending) throw UGridPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__shared_ptrT_netCDF__NcFile_t m_ncFile {
    set {
      UGridPINVOKE.UGridState_m_ncFile_set(swigCPtr, SWIGTYPE_p_std__shared_ptrT_netCDF__NcFile_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = UGridPINVOKE.UGridState_m_ncFile_get(swigCPtr);
      SWIGTYPE_p_std__shared_ptrT_netCDF__NcFile_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__shared_ptrT_netCDF__NcFile_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_ugrid__Mesh1D_t m_mesh1d {
    set {
      UGridPINVOKE.UGridState_m_mesh1d_set(swigCPtr, SWIGTYPE_p_std__vectorT_ugrid__Mesh1D_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = UGridPINVOKE.UGridState_m_mesh1d_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_ugrid__Mesh1D_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_ugrid__Mesh1D_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_ugrid__Network1D_t m_network1d {
    set {
      UGridPINVOKE.UGridState_m_network1d_set(swigCPtr, SWIGTYPE_p_std__vectorT_ugrid__Network1D_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = UGridPINVOKE.UGridState_m_network1d_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_ugrid__Network1D_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_ugrid__Network1D_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_ugrid__Mesh2D_t m_mesh2d {
    set {
      UGridPINVOKE.UGridState_m_mesh2d_set(swigCPtr, SWIGTYPE_p_std__vectorT_ugrid__Mesh2D_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = UGridPINVOKE.UGridState_m_mesh2d_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_ugrid__Mesh2D_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_ugrid__Mesh2D_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_ugrid__Contacts_t m_contacts {
    set {
      UGridPINVOKE.UGridState_m_contacts_set(swigCPtr, SWIGTYPE_p_std__vectorT_ugrid__Contacts_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = UGridPINVOKE.UGridState_m_contacts_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_ugrid__Contacts_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_ugrid__Contacts_t(cPtr, false);
      return ret;
    } 
  }

  public void set_dimension(string dimension_name, int dimension_value) {
    UGridPINVOKE.UGridState_set_dimension(swigCPtr, dimension_name, dimension_value);
    if (UGridPINVOKE.SWIGPendingException.Pending) throw UGridPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_netCDF__NcDim get_dimension(string dimension_name) {
    SWIGTYPE_p_netCDF__NcDim ret = new SWIGTYPE_p_netCDF__NcDim(UGridPINVOKE.UGridState_get_dimension(swigCPtr, dimension_name), true);
    if (UGridPINVOKE.SWIGPendingException.Pending) throw UGridPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
