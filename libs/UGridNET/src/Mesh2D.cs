//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Mesh2D : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Mesh2D(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Mesh2D obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Mesh2D obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Mesh2D() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          UGridPINVOKE.delete_Mesh2D(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public string name {
    set {
      UGridPINVOKE.Mesh2D_name_set(swigCPtr, value);
    } 
    get {
      string ret = UGridPINVOKE.Mesh2D_name_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int edge_nodes {
    set {
      UGridPINVOKE.Mesh2D_edge_nodes_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = UGridPINVOKE.Mesh2D_edge_nodes_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int face_nodes {
    set {
      UGridPINVOKE.Mesh2D_face_nodes_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = UGridPINVOKE.Mesh2D_face_nodes_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_double node_x {
    set {
      UGridPINVOKE.Mesh2D_node_x_set(swigCPtr, SWIGTYPE_p_double.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = UGridPINVOKE.Mesh2D_node_x_get(swigCPtr);
      SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_double node_y {
    set {
      UGridPINVOKE.Mesh2D_node_y_set(swigCPtr, SWIGTYPE_p_double.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = UGridPINVOKE.Mesh2D_node_y_get(swigCPtr);
      SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_double edge_x {
    set {
      UGridPINVOKE.Mesh2D_edge_x_set(swigCPtr, SWIGTYPE_p_double.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = UGridPINVOKE.Mesh2D_edge_x_get(swigCPtr);
      SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_double edge_y {
    set {
      UGridPINVOKE.Mesh2D_edge_y_set(swigCPtr, SWIGTYPE_p_double.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = UGridPINVOKE.Mesh2D_edge_y_get(swigCPtr);
      SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_double face_x {
    set {
      UGridPINVOKE.Mesh2D_face_x_set(swigCPtr, SWIGTYPE_p_double.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = UGridPINVOKE.Mesh2D_face_x_get(swigCPtr);
      SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_double face_y {
    set {
      UGridPINVOKE.Mesh2D_face_y_set(swigCPtr, SWIGTYPE_p_double.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = UGridPINVOKE.Mesh2D_face_y_get(swigCPtr);
      SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int edge_faces {
    set {
      UGridPINVOKE.Mesh2D_edge_faces_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = UGridPINVOKE.Mesh2D_edge_faces_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int face_edges {
    set {
      UGridPINVOKE.Mesh2D_face_edges_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = UGridPINVOKE.Mesh2D_face_edges_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int face_faces {
    set {
      UGridPINVOKE.Mesh2D_face_faces_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = UGridPINVOKE.Mesh2D_face_faces_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_double node_z {
    set {
      UGridPINVOKE.Mesh2D_node_z_set(swigCPtr, SWIGTYPE_p_double.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = UGridPINVOKE.Mesh2D_node_z_get(swigCPtr);
      SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_double edge_z {
    set {
      UGridPINVOKE.Mesh2D_edge_z_set(swigCPtr, SWIGTYPE_p_double.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = UGridPINVOKE.Mesh2D_edge_z_get(swigCPtr);
      SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_double face_z {
    set {
      UGridPINVOKE.Mesh2D_face_z_set(swigCPtr, SWIGTYPE_p_double.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = UGridPINVOKE.Mesh2D_face_z_get(swigCPtr);
      SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_double layer_zs {
    set {
      UGridPINVOKE.Mesh2D_layer_zs_set(swigCPtr, SWIGTYPE_p_double.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = UGridPINVOKE.Mesh2D_layer_zs_get(swigCPtr);
      SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_double interface_zs {
    set {
      UGridPINVOKE.Mesh2D_interface_zs_set(swigCPtr, SWIGTYPE_p_double.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = UGridPINVOKE.Mesh2D_interface_zs_get(swigCPtr);
      SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_double boundary_node_connectivity {
    set {
      UGridPINVOKE.Mesh2D_boundary_node_connectivity_set(swigCPtr, SWIGTYPE_p_double.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = UGridPINVOKE.Mesh2D_boundary_node_connectivity_get(swigCPtr);
      SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_double volume_coordinates {
    set {
      UGridPINVOKE.Mesh2D_volume_coordinates_set(swigCPtr, SWIGTYPE_p_double.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = UGridPINVOKE.Mesh2D_volume_coordinates_get(swigCPtr);
      SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
      return ret;
    } 
  }

  public int num_nodes {
    set {
      UGridPINVOKE.Mesh2D_num_nodes_set(swigCPtr, value);
    } 
    get {
      int ret = UGridPINVOKE.Mesh2D_num_nodes_get(swigCPtr);
      return ret;
    } 
  }

  public int num_edges {
    set {
      UGridPINVOKE.Mesh2D_num_edges_set(swigCPtr, value);
    } 
    get {
      int ret = UGridPINVOKE.Mesh2D_num_edges_get(swigCPtr);
      return ret;
    } 
  }

  public int num_faces {
    set {
      UGridPINVOKE.Mesh2D_num_faces_set(swigCPtr, value);
    } 
    get {
      int ret = UGridPINVOKE.Mesh2D_num_faces_get(swigCPtr);
      return ret;
    } 
  }

  public int num_layers {
    set {
      UGridPINVOKE.Mesh2D_num_layers_set(swigCPtr, value);
    } 
    get {
      int ret = UGridPINVOKE.Mesh2D_num_layers_get(swigCPtr);
      return ret;
    } 
  }

  public int start_index {
    set {
      UGridPINVOKE.Mesh2D_start_index_set(swigCPtr, value);
    } 
    get {
      int ret = UGridPINVOKE.Mesh2D_start_index_get(swigCPtr);
      return ret;
    } 
  }

  public int num_face_nodes_max {
    set {
      UGridPINVOKE.Mesh2D_num_face_nodes_max_set(swigCPtr, value);
    } 
    get {
      int ret = UGridPINVOKE.Mesh2D_num_face_nodes_max_get(swigCPtr);
      return ret;
    } 
  }

  public int is_spherical {
    set {
      UGridPINVOKE.Mesh2D_is_spherical_set(swigCPtr, value);
    } 
    get {
      int ret = UGridPINVOKE.Mesh2D_is_spherical_get(swigCPtr);
      return ret;
    } 
  }

  public double double_fill_value {
    set {
      UGridPINVOKE.Mesh2D_double_fill_value_set(swigCPtr, value);
    } 
    get {
      double ret = UGridPINVOKE.Mesh2D_double_fill_value_get(swigCPtr);
      return ret;
    } 
  }

  public int int_fill_value {
    set {
      UGridPINVOKE.Mesh2D_int_fill_value_set(swigCPtr, value);
    } 
    get {
      int ret = UGridPINVOKE.Mesh2D_int_fill_value_get(swigCPtr);
      return ret;
    } 
  }

  public Mesh2D() : this(UGridPINVOKE.new_Mesh2D(), true) {
  }

}
