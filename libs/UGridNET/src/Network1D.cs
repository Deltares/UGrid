//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Network1D : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Network1D(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Network1D obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Network1D obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Network1D() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          UGridPINVOKE.delete_Network1D(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public string name {
    set {
      UGridPINVOKE.Network1D_name_set(swigCPtr, value);
    } 
    get {
      string ret = UGridPINVOKE.Network1D_name_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_double node_x {
    set {
      UGridPINVOKE.Network1D_node_x_set(swigCPtr, SWIGTYPE_p_double.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = UGridPINVOKE.Network1D_node_x_get(swigCPtr);
      SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_double node_y {
    set {
      UGridPINVOKE.Network1D_node_y_set(swigCPtr, SWIGTYPE_p_double.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = UGridPINVOKE.Network1D_node_y_get(swigCPtr);
      SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
      return ret;
    } 
  }

  public string node_id {
    set {
      UGridPINVOKE.Network1D_node_id_set(swigCPtr, value);
    } 
    get {
      string ret = UGridPINVOKE.Network1D_node_id_get(swigCPtr);
      return ret;
    } 
  }

  public string node_long_name {
    set {
      UGridPINVOKE.Network1D_node_long_name_set(swigCPtr, value);
    } 
    get {
      string ret = UGridPINVOKE.Network1D_node_long_name_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int edge_nodes {
    set {
      UGridPINVOKE.Network1D_edge_nodes_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = UGridPINVOKE.Network1D_edge_nodes_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_double edge_length {
    set {
      UGridPINVOKE.Network1D_edge_length_set(swigCPtr, SWIGTYPE_p_double.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = UGridPINVOKE.Network1D_edge_length_get(swigCPtr);
      SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int edge_order {
    set {
      UGridPINVOKE.Network1D_edge_order_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = UGridPINVOKE.Network1D_edge_order_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public string edge_id {
    set {
      UGridPINVOKE.Network1D_edge_id_set(swigCPtr, value);
    } 
    get {
      string ret = UGridPINVOKE.Network1D_edge_id_get(swigCPtr);
      return ret;
    } 
  }

  public string edge_long_name {
    set {
      UGridPINVOKE.Network1D_edge_long_name_set(swigCPtr, value);
    } 
    get {
      string ret = UGridPINVOKE.Network1D_edge_long_name_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_double geometry_nodes_x {
    set {
      UGridPINVOKE.Network1D_geometry_nodes_x_set(swigCPtr, SWIGTYPE_p_double.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = UGridPINVOKE.Network1D_geometry_nodes_x_get(swigCPtr);
      SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_double geometry_nodes_y {
    set {
      UGridPINVOKE.Network1D_geometry_nodes_y_set(swigCPtr, SWIGTYPE_p_double.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = UGridPINVOKE.Network1D_geometry_nodes_y_get(swigCPtr);
      SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int num_edge_geometry_nodes {
    set {
      UGridPINVOKE.Network1D_num_edge_geometry_nodes_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = UGridPINVOKE.Network1D_num_edge_geometry_nodes_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public int num_geometry_nodes {
    set {
      UGridPINVOKE.Network1D_num_geometry_nodes_set(swigCPtr, value);
    } 
    get {
      int ret = UGridPINVOKE.Network1D_num_geometry_nodes_get(swigCPtr);
      return ret;
    } 
  }

  public int num_nodes {
    set {
      UGridPINVOKE.Network1D_num_nodes_set(swigCPtr, value);
    } 
    get {
      int ret = UGridPINVOKE.Network1D_num_nodes_get(swigCPtr);
      return ret;
    } 
  }

  public int num_edges {
    set {
      UGridPINVOKE.Network1D_num_edges_set(swigCPtr, value);
    } 
    get {
      int ret = UGridPINVOKE.Network1D_num_edges_get(swigCPtr);
      return ret;
    } 
  }

  public int is_spherical {
    set {
      UGridPINVOKE.Network1D_is_spherical_set(swigCPtr, value);
    } 
    get {
      int ret = UGridPINVOKE.Network1D_is_spherical_get(swigCPtr);
      return ret;
    } 
  }

  public int start_index {
    set {
      UGridPINVOKE.Network1D_start_index_set(swigCPtr, value);
    } 
    get {
      int ret = UGridPINVOKE.Network1D_start_index_get(swigCPtr);
      return ret;
    } 
  }

  public Network1D() : this(UGridPINVOKE.new_Network1D(), true) {
  }

}
