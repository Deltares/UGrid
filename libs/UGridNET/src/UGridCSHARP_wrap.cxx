/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040201
#define SWIGCSHARP

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_UGrid(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_UGrid(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_UGrid(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <unordered_map>
#include <algorithm>
#include <stdexcept>


  #include "Contacts.hpp"
  #include "Mesh1D.hpp"
  #include "Mesh2D.hpp"
  #include "Network1D.hpp"
  #include "UGridState.hpp"
  #include "UGrid.hpp"


#include <string.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_Contacts_name_set(void * jarg1, char * jarg2) {
  ugridapi::Contacts *arg1 = (ugridapi::Contacts *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ugridapi::Contacts *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->name;
    if (arg2) {
      arg1->name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Contacts_name_get(void * jarg1) {
  char * jresult ;
  ugridapi::Contacts *arg1 = (ugridapi::Contacts *) 0 ;
  char *result = 0 ;
  
  arg1 = (ugridapi::Contacts *)jarg1; 
  result = (char *) ((arg1)->name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contacts_edges_set(void * jarg1, void * jarg2) {
  ugridapi::Contacts *arg1 = (ugridapi::Contacts *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (ugridapi::Contacts *)jarg1; 
  arg2 = (int *)jarg2; 
  if (arg1) (arg1)->edges = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Contacts_edges_get(void * jarg1) {
  void * jresult ;
  ugridapi::Contacts *arg1 = (ugridapi::Contacts *) 0 ;
  int *result = 0 ;
  
  arg1 = (ugridapi::Contacts *)jarg1; 
  result = (int *) ((arg1)->edges);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contacts_contact_type_set(void * jarg1, void * jarg2) {
  ugridapi::Contacts *arg1 = (ugridapi::Contacts *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (ugridapi::Contacts *)jarg1; 
  arg2 = (int *)jarg2; 
  if (arg1) (arg1)->contact_type = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Contacts_contact_type_get(void * jarg1) {
  void * jresult ;
  ugridapi::Contacts *arg1 = (ugridapi::Contacts *) 0 ;
  int *result = 0 ;
  
  arg1 = (ugridapi::Contacts *)jarg1; 
  result = (int *) ((arg1)->contact_type);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contacts_contact_name_id_set(void * jarg1, char * jarg2) {
  ugridapi::Contacts *arg1 = (ugridapi::Contacts *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ugridapi::Contacts *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->contact_name_id;
    if (arg2) {
      arg1->contact_name_id = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->contact_name_id, (const char *)arg2);
    } else {
      arg1->contact_name_id = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Contacts_contact_name_id_get(void * jarg1) {
  char * jresult ;
  ugridapi::Contacts *arg1 = (ugridapi::Contacts *) 0 ;
  char *result = 0 ;
  
  arg1 = (ugridapi::Contacts *)jarg1; 
  result = (char *) ((arg1)->contact_name_id);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contacts_contact_name_long_set(void * jarg1, char * jarg2) {
  ugridapi::Contacts *arg1 = (ugridapi::Contacts *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ugridapi::Contacts *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->contact_name_long;
    if (arg2) {
      arg1->contact_name_long = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->contact_name_long, (const char *)arg2);
    } else {
      arg1->contact_name_long = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Contacts_contact_name_long_get(void * jarg1) {
  char * jresult ;
  ugridapi::Contacts *arg1 = (ugridapi::Contacts *) 0 ;
  char *result = 0 ;
  
  arg1 = (ugridapi::Contacts *)jarg1; 
  result = (char *) ((arg1)->contact_name_long);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contacts_mesh_from_name_set(void * jarg1, char * jarg2) {
  ugridapi::Contacts *arg1 = (ugridapi::Contacts *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ugridapi::Contacts *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->mesh_from_name;
    if (arg2) {
      arg1->mesh_from_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->mesh_from_name, (const char *)arg2);
    } else {
      arg1->mesh_from_name = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Contacts_mesh_from_name_get(void * jarg1) {
  char * jresult ;
  ugridapi::Contacts *arg1 = (ugridapi::Contacts *) 0 ;
  char *result = 0 ;
  
  arg1 = (ugridapi::Contacts *)jarg1; 
  result = (char *) ((arg1)->mesh_from_name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contacts_mesh_to_name_set(void * jarg1, char * jarg2) {
  ugridapi::Contacts *arg1 = (ugridapi::Contacts *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ugridapi::Contacts *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->mesh_to_name;
    if (arg2) {
      arg1->mesh_to_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->mesh_to_name, (const char *)arg2);
    } else {
      arg1->mesh_to_name = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Contacts_mesh_to_name_get(void * jarg1) {
  char * jresult ;
  ugridapi::Contacts *arg1 = (ugridapi::Contacts *) 0 ;
  char *result = 0 ;
  
  arg1 = (ugridapi::Contacts *)jarg1; 
  result = (char *) ((arg1)->mesh_to_name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contacts_mesh_from_location_set(void * jarg1, int jarg2) {
  ugridapi::Contacts *arg1 = (ugridapi::Contacts *) 0 ;
  int arg2 ;
  
  arg1 = (ugridapi::Contacts *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mesh_from_location = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Contacts_mesh_from_location_get(void * jarg1) {
  int jresult ;
  ugridapi::Contacts *arg1 = (ugridapi::Contacts *) 0 ;
  int result;
  
  arg1 = (ugridapi::Contacts *)jarg1; 
  result = (int) ((arg1)->mesh_from_location);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contacts_mesh_to_location_set(void * jarg1, int jarg2) {
  ugridapi::Contacts *arg1 = (ugridapi::Contacts *) 0 ;
  int arg2 ;
  
  arg1 = (ugridapi::Contacts *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mesh_to_location = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Contacts_mesh_to_location_get(void * jarg1) {
  int jresult ;
  ugridapi::Contacts *arg1 = (ugridapi::Contacts *) 0 ;
  int result;
  
  arg1 = (ugridapi::Contacts *)jarg1; 
  result = (int) ((arg1)->mesh_to_location);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contacts_num_contacts_set(void * jarg1, int jarg2) {
  ugridapi::Contacts *arg1 = (ugridapi::Contacts *) 0 ;
  int arg2 ;
  
  arg1 = (ugridapi::Contacts *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_contacts = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Contacts_num_contacts_get(void * jarg1) {
  int jresult ;
  ugridapi::Contacts *arg1 = (ugridapi::Contacts *) 0 ;
  int result;
  
  arg1 = (ugridapi::Contacts *)jarg1; 
  result = (int) ((arg1)->num_contacts);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Contacts() {
  void * jresult ;
  ugridapi::Contacts *result = 0 ;
  
  result = (ugridapi::Contacts *)new ugridapi::Contacts();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Contacts(void * jarg1) {
  ugridapi::Contacts *arg1 = (ugridapi::Contacts *) 0 ;
  
  arg1 = (ugridapi::Contacts *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh1D_name_set(void * jarg1, char * jarg2) {
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->name;
    if (arg2) {
      arg1->name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Mesh1D_name_get(void * jarg1) {
  char * jresult ;
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  char *result = 0 ;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  result = (char *) ((arg1)->name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh1D_network_name_set(void * jarg1, char * jarg2) {
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->network_name;
    if (arg2) {
      arg1->network_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->network_name, (const char *)arg2);
    } else {
      arg1->network_name = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Mesh1D_network_name_get(void * jarg1) {
  char * jresult ;
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  char *result = 0 ;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  result = (char *) ((arg1)->network_name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh1D_node_x_set(void * jarg1, void * jarg2) {
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  arg2 = (double *)jarg2; 
  if (arg1) (arg1)->node_x = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh1D_node_x_get(void * jarg1) {
  void * jresult ;
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  double *result = 0 ;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  result = (double *) ((arg1)->node_x);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh1D_node_y_set(void * jarg1, void * jarg2) {
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  arg2 = (double *)jarg2; 
  if (arg1) (arg1)->node_y = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh1D_node_y_get(void * jarg1) {
  void * jresult ;
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  double *result = 0 ;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  result = (double *) ((arg1)->node_y);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh1D_edge_nodes_set(void * jarg1, void * jarg2) {
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  arg2 = (int *)jarg2; 
  if (arg1) (arg1)->edge_nodes = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh1D_edge_nodes_get(void * jarg1) {
  void * jresult ;
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  int *result = 0 ;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  result = (int *) ((arg1)->edge_nodes);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh1D_node_edge_id_set(void * jarg1, void * jarg2) {
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  arg2 = (int *)jarg2; 
  if (arg1) (arg1)->node_edge_id = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh1D_node_edge_id_get(void * jarg1) {
  void * jresult ;
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  int *result = 0 ;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  result = (int *) ((arg1)->node_edge_id);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh1D_node_edge_offset_set(void * jarg1, void * jarg2) {
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  arg2 = (double *)jarg2; 
  if (arg1) (arg1)->node_edge_offset = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh1D_node_edge_offset_get(void * jarg1) {
  void * jresult ;
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  double *result = 0 ;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  result = (double *) ((arg1)->node_edge_offset);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh1D_node_id_set(void * jarg1, char * jarg2) {
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->node_id;
    if (arg2) {
      arg1->node_id = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->node_id, (const char *)arg2);
    } else {
      arg1->node_id = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Mesh1D_node_id_get(void * jarg1) {
  char * jresult ;
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  char *result = 0 ;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  result = (char *) ((arg1)->node_id);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh1D_node_long_name_set(void * jarg1, char * jarg2) {
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->node_long_name;
    if (arg2) {
      arg1->node_long_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->node_long_name, (const char *)arg2);
    } else {
      arg1->node_long_name = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Mesh1D_node_long_name_get(void * jarg1) {
  char * jresult ;
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  char *result = 0 ;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  result = (char *) ((arg1)->node_long_name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh1D_edge_edge_id_set(void * jarg1, void * jarg2) {
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  arg2 = (int *)jarg2; 
  if (arg1) (arg1)->edge_edge_id = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh1D_edge_edge_id_get(void * jarg1) {
  void * jresult ;
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  int *result = 0 ;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  result = (int *) ((arg1)->edge_edge_id);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh1D_edge_edge_offset_set(void * jarg1, void * jarg2) {
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  arg2 = (double *)jarg2; 
  if (arg1) (arg1)->edge_edge_offset = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh1D_edge_edge_offset_get(void * jarg1) {
  void * jresult ;
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  double *result = 0 ;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  result = (double *) ((arg1)->edge_edge_offset);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh1D_edge_x_set(void * jarg1, void * jarg2) {
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  arg2 = (double *)jarg2; 
  if (arg1) (arg1)->edge_x = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh1D_edge_x_get(void * jarg1) {
  void * jresult ;
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  double *result = 0 ;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  result = (double *) ((arg1)->edge_x);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh1D_edge_y_set(void * jarg1, void * jarg2) {
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  arg2 = (double *)jarg2; 
  if (arg1) (arg1)->edge_y = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh1D_edge_y_get(void * jarg1) {
  void * jresult ;
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  double *result = 0 ;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  result = (double *) ((arg1)->edge_y);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh1D_num_nodes_set(void * jarg1, int jarg2) {
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  int arg2 ;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_nodes = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mesh1D_num_nodes_get(void * jarg1) {
  int jresult ;
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  int result;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  result = (int) ((arg1)->num_nodes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh1D_num_edges_set(void * jarg1, int jarg2) {
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  int arg2 ;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_edges = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mesh1D_num_edges_get(void * jarg1) {
  int jresult ;
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  int result;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  result = (int) ((arg1)->num_edges);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh1D_is_spherical_set(void * jarg1, int jarg2) {
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  int arg2 ;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->is_spherical = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mesh1D_is_spherical_get(void * jarg1) {
  int jresult ;
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  int result;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  result = (int) ((arg1)->is_spherical);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh1D_start_index_set(void * jarg1, int jarg2) {
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  int arg2 ;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->start_index = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mesh1D_start_index_get(void * jarg1) {
  int jresult ;
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  int result;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  result = (int) ((arg1)->start_index);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh1D_double_fill_value_set(void * jarg1, double jarg2) {
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  double arg2 ;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->double_fill_value = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Mesh1D_double_fill_value_get(void * jarg1) {
  double jresult ;
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  double result;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  result = (double) ((arg1)->double_fill_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh1D_int_fill_value_set(void * jarg1, int jarg2) {
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  int arg2 ;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->int_fill_value = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mesh1D_int_fill_value_get(void * jarg1) {
  int jresult ;
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  int result;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  result = (int) ((arg1)->int_fill_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Mesh1D() {
  void * jresult ;
  ugridapi::Mesh1D *result = 0 ;
  
  result = (ugridapi::Mesh1D *)new ugridapi::Mesh1D();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Mesh1D(void * jarg1) {
  ugridapi::Mesh1D *arg1 = (ugridapi::Mesh1D *) 0 ;
  
  arg1 = (ugridapi::Mesh1D *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh2D_name_set(void * jarg1, char * jarg2) {
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->name;
    if (arg2) {
      arg1->name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Mesh2D_name_get(void * jarg1) {
  char * jresult ;
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  char *result = 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  result = (char *) ((arg1)->name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh2D_edge_nodes_set(void * jarg1, void * jarg2) {
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  arg2 = (int *)jarg2; 
  if (arg1) (arg1)->edge_nodes = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh2D_edge_nodes_get(void * jarg1) {
  void * jresult ;
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  int *result = 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  result = (int *) ((arg1)->edge_nodes);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh2D_face_nodes_set(void * jarg1, void * jarg2) {
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  arg2 = (int *)jarg2; 
  if (arg1) (arg1)->face_nodes = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh2D_face_nodes_get(void * jarg1) {
  void * jresult ;
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  int *result = 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  result = (int *) ((arg1)->face_nodes);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh2D_node_x_set(void * jarg1, void * jarg2) {
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  arg2 = (double *)jarg2; 
  if (arg1) (arg1)->node_x = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh2D_node_x_get(void * jarg1) {
  void * jresult ;
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  double *result = 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  result = (double *) ((arg1)->node_x);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh2D_node_y_set(void * jarg1, void * jarg2) {
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  arg2 = (double *)jarg2; 
  if (arg1) (arg1)->node_y = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh2D_node_y_get(void * jarg1) {
  void * jresult ;
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  double *result = 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  result = (double *) ((arg1)->node_y);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh2D_edge_x_set(void * jarg1, void * jarg2) {
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  arg2 = (double *)jarg2; 
  if (arg1) (arg1)->edge_x = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh2D_edge_x_get(void * jarg1) {
  void * jresult ;
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  double *result = 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  result = (double *) ((arg1)->edge_x);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh2D_edge_y_set(void * jarg1, void * jarg2) {
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  arg2 = (double *)jarg2; 
  if (arg1) (arg1)->edge_y = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh2D_edge_y_get(void * jarg1) {
  void * jresult ;
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  double *result = 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  result = (double *) ((arg1)->edge_y);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh2D_face_x_set(void * jarg1, void * jarg2) {
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  arg2 = (double *)jarg2; 
  if (arg1) (arg1)->face_x = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh2D_face_x_get(void * jarg1) {
  void * jresult ;
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  double *result = 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  result = (double *) ((arg1)->face_x);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh2D_face_y_set(void * jarg1, void * jarg2) {
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  arg2 = (double *)jarg2; 
  if (arg1) (arg1)->face_y = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh2D_face_y_get(void * jarg1) {
  void * jresult ;
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  double *result = 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  result = (double *) ((arg1)->face_y);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh2D_edge_faces_set(void * jarg1, void * jarg2) {
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  arg2 = (int *)jarg2; 
  if (arg1) (arg1)->edge_faces = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh2D_edge_faces_get(void * jarg1) {
  void * jresult ;
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  int *result = 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  result = (int *) ((arg1)->edge_faces);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh2D_face_edges_set(void * jarg1, void * jarg2) {
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  arg2 = (int *)jarg2; 
  if (arg1) (arg1)->face_edges = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh2D_face_edges_get(void * jarg1) {
  void * jresult ;
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  int *result = 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  result = (int *) ((arg1)->face_edges);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh2D_face_faces_set(void * jarg1, void * jarg2) {
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  arg2 = (int *)jarg2; 
  if (arg1) (arg1)->face_faces = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh2D_face_faces_get(void * jarg1) {
  void * jresult ;
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  int *result = 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  result = (int *) ((arg1)->face_faces);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh2D_node_z_set(void * jarg1, void * jarg2) {
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  arg2 = (double *)jarg2; 
  if (arg1) (arg1)->node_z = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh2D_node_z_get(void * jarg1) {
  void * jresult ;
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  double *result = 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  result = (double *) ((arg1)->node_z);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh2D_edge_z_set(void * jarg1, void * jarg2) {
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  arg2 = (double *)jarg2; 
  if (arg1) (arg1)->edge_z = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh2D_edge_z_get(void * jarg1) {
  void * jresult ;
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  double *result = 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  result = (double *) ((arg1)->edge_z);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh2D_face_z_set(void * jarg1, void * jarg2) {
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  arg2 = (double *)jarg2; 
  if (arg1) (arg1)->face_z = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh2D_face_z_get(void * jarg1) {
  void * jresult ;
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  double *result = 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  result = (double *) ((arg1)->face_z);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh2D_layer_zs_set(void * jarg1, void * jarg2) {
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  arg2 = (double *)jarg2; 
  if (arg1) (arg1)->layer_zs = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh2D_layer_zs_get(void * jarg1) {
  void * jresult ;
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  double *result = 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  result = (double *) ((arg1)->layer_zs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh2D_interface_zs_set(void * jarg1, void * jarg2) {
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  arg2 = (double *)jarg2; 
  if (arg1) (arg1)->interface_zs = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh2D_interface_zs_get(void * jarg1) {
  void * jresult ;
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  double *result = 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  result = (double *) ((arg1)->interface_zs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh2D_boundary_node_connectivity_set(void * jarg1, void * jarg2) {
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  arg2 = (double *)jarg2; 
  if (arg1) (arg1)->boundary_node_connectivity = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh2D_boundary_node_connectivity_get(void * jarg1) {
  void * jresult ;
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  double *result = 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  result = (double *) ((arg1)->boundary_node_connectivity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh2D_volume_coordinates_set(void * jarg1, void * jarg2) {
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  arg2 = (double *)jarg2; 
  if (arg1) (arg1)->volume_coordinates = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh2D_volume_coordinates_get(void * jarg1) {
  void * jresult ;
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  double *result = 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  result = (double *) ((arg1)->volume_coordinates);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh2D_num_nodes_set(void * jarg1, int jarg2) {
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  int arg2 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_nodes = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mesh2D_num_nodes_get(void * jarg1) {
  int jresult ;
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  int result;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  result = (int) ((arg1)->num_nodes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh2D_num_edges_set(void * jarg1, int jarg2) {
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  int arg2 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_edges = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mesh2D_num_edges_get(void * jarg1) {
  int jresult ;
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  int result;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  result = (int) ((arg1)->num_edges);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh2D_num_faces_set(void * jarg1, int jarg2) {
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  int arg2 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_faces = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mesh2D_num_faces_get(void * jarg1) {
  int jresult ;
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  int result;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  result = (int) ((arg1)->num_faces);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh2D_num_layers_set(void * jarg1, int jarg2) {
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  int arg2 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_layers = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mesh2D_num_layers_get(void * jarg1) {
  int jresult ;
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  int result;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  result = (int) ((arg1)->num_layers);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh2D_start_index_set(void * jarg1, int jarg2) {
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  int arg2 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->start_index = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mesh2D_start_index_get(void * jarg1) {
  int jresult ;
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  int result;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  result = (int) ((arg1)->start_index);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh2D_num_face_nodes_max_set(void * jarg1, int jarg2) {
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  int arg2 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_face_nodes_max = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mesh2D_num_face_nodes_max_get(void * jarg1) {
  int jresult ;
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  int result;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  result = (int) ((arg1)->num_face_nodes_max);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh2D_is_spherical_set(void * jarg1, int jarg2) {
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  int arg2 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->is_spherical = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mesh2D_is_spherical_get(void * jarg1) {
  int jresult ;
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  int result;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  result = (int) ((arg1)->is_spherical);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh2D_double_fill_value_set(void * jarg1, double jarg2) {
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  double arg2 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->double_fill_value = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Mesh2D_double_fill_value_get(void * jarg1) {
  double jresult ;
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  double result;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  result = (double) ((arg1)->double_fill_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh2D_int_fill_value_set(void * jarg1, int jarg2) {
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  int arg2 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->int_fill_value = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mesh2D_int_fill_value_get(void * jarg1) {
  int jresult ;
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  int result;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  result = (int) ((arg1)->int_fill_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Mesh2D() {
  void * jresult ;
  ugridapi::Mesh2D *result = 0 ;
  
  result = (ugridapi::Mesh2D *)new ugridapi::Mesh2D();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Mesh2D(void * jarg1) {
  ugridapi::Mesh2D *arg1 = (ugridapi::Mesh2D *) 0 ;
  
  arg1 = (ugridapi::Mesh2D *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Network1D_name_set(void * jarg1, char * jarg2) {
  ugridapi::Network1D *arg1 = (ugridapi::Network1D *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ugridapi::Network1D *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->name;
    if (arg2) {
      arg1->name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Network1D_name_get(void * jarg1) {
  char * jresult ;
  ugridapi::Network1D *arg1 = (ugridapi::Network1D *) 0 ;
  char *result = 0 ;
  
  arg1 = (ugridapi::Network1D *)jarg1; 
  result = (char *) ((arg1)->name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Network1D_node_x_set(void * jarg1, void * jarg2) {
  ugridapi::Network1D *arg1 = (ugridapi::Network1D *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (ugridapi::Network1D *)jarg1; 
  arg2 = (double *)jarg2; 
  if (arg1) (arg1)->node_x = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Network1D_node_x_get(void * jarg1) {
  void * jresult ;
  ugridapi::Network1D *arg1 = (ugridapi::Network1D *) 0 ;
  double *result = 0 ;
  
  arg1 = (ugridapi::Network1D *)jarg1; 
  result = (double *) ((arg1)->node_x);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Network1D_node_y_set(void * jarg1, void * jarg2) {
  ugridapi::Network1D *arg1 = (ugridapi::Network1D *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (ugridapi::Network1D *)jarg1; 
  arg2 = (double *)jarg2; 
  if (arg1) (arg1)->node_y = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Network1D_node_y_get(void * jarg1) {
  void * jresult ;
  ugridapi::Network1D *arg1 = (ugridapi::Network1D *) 0 ;
  double *result = 0 ;
  
  arg1 = (ugridapi::Network1D *)jarg1; 
  result = (double *) ((arg1)->node_y);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Network1D_node_id_set(void * jarg1, char * jarg2) {
  ugridapi::Network1D *arg1 = (ugridapi::Network1D *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ugridapi::Network1D *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->node_id;
    if (arg2) {
      arg1->node_id = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->node_id, (const char *)arg2);
    } else {
      arg1->node_id = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Network1D_node_id_get(void * jarg1) {
  char * jresult ;
  ugridapi::Network1D *arg1 = (ugridapi::Network1D *) 0 ;
  char *result = 0 ;
  
  arg1 = (ugridapi::Network1D *)jarg1; 
  result = (char *) ((arg1)->node_id);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Network1D_node_long_name_set(void * jarg1, char * jarg2) {
  ugridapi::Network1D *arg1 = (ugridapi::Network1D *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ugridapi::Network1D *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->node_long_name;
    if (arg2) {
      arg1->node_long_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->node_long_name, (const char *)arg2);
    } else {
      arg1->node_long_name = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Network1D_node_long_name_get(void * jarg1) {
  char * jresult ;
  ugridapi::Network1D *arg1 = (ugridapi::Network1D *) 0 ;
  char *result = 0 ;
  
  arg1 = (ugridapi::Network1D *)jarg1; 
  result = (char *) ((arg1)->node_long_name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Network1D_edge_nodes_set(void * jarg1, void * jarg2) {
  ugridapi::Network1D *arg1 = (ugridapi::Network1D *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (ugridapi::Network1D *)jarg1; 
  arg2 = (int *)jarg2; 
  if (arg1) (arg1)->edge_nodes = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Network1D_edge_nodes_get(void * jarg1) {
  void * jresult ;
  ugridapi::Network1D *arg1 = (ugridapi::Network1D *) 0 ;
  int *result = 0 ;
  
  arg1 = (ugridapi::Network1D *)jarg1; 
  result = (int *) ((arg1)->edge_nodes);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Network1D_edge_length_set(void * jarg1, void * jarg2) {
  ugridapi::Network1D *arg1 = (ugridapi::Network1D *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (ugridapi::Network1D *)jarg1; 
  arg2 = (double *)jarg2; 
  if (arg1) (arg1)->edge_length = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Network1D_edge_length_get(void * jarg1) {
  void * jresult ;
  ugridapi::Network1D *arg1 = (ugridapi::Network1D *) 0 ;
  double *result = 0 ;
  
  arg1 = (ugridapi::Network1D *)jarg1; 
  result = (double *) ((arg1)->edge_length);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Network1D_edge_order_set(void * jarg1, void * jarg2) {
  ugridapi::Network1D *arg1 = (ugridapi::Network1D *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (ugridapi::Network1D *)jarg1; 
  arg2 = (int *)jarg2; 
  if (arg1) (arg1)->edge_order = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Network1D_edge_order_get(void * jarg1) {
  void * jresult ;
  ugridapi::Network1D *arg1 = (ugridapi::Network1D *) 0 ;
  int *result = 0 ;
  
  arg1 = (ugridapi::Network1D *)jarg1; 
  result = (int *) ((arg1)->edge_order);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Network1D_edge_id_set(void * jarg1, char * jarg2) {
  ugridapi::Network1D *arg1 = (ugridapi::Network1D *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ugridapi::Network1D *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->edge_id;
    if (arg2) {
      arg1->edge_id = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->edge_id, (const char *)arg2);
    } else {
      arg1->edge_id = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Network1D_edge_id_get(void * jarg1) {
  char * jresult ;
  ugridapi::Network1D *arg1 = (ugridapi::Network1D *) 0 ;
  char *result = 0 ;
  
  arg1 = (ugridapi::Network1D *)jarg1; 
  result = (char *) ((arg1)->edge_id);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Network1D_edge_long_name_set(void * jarg1, char * jarg2) {
  ugridapi::Network1D *arg1 = (ugridapi::Network1D *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ugridapi::Network1D *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->edge_long_name;
    if (arg2) {
      arg1->edge_long_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->edge_long_name, (const char *)arg2);
    } else {
      arg1->edge_long_name = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Network1D_edge_long_name_get(void * jarg1) {
  char * jresult ;
  ugridapi::Network1D *arg1 = (ugridapi::Network1D *) 0 ;
  char *result = 0 ;
  
  arg1 = (ugridapi::Network1D *)jarg1; 
  result = (char *) ((arg1)->edge_long_name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Network1D_geometry_nodes_x_set(void * jarg1, void * jarg2) {
  ugridapi::Network1D *arg1 = (ugridapi::Network1D *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (ugridapi::Network1D *)jarg1; 
  arg2 = (double *)jarg2; 
  if (arg1) (arg1)->geometry_nodes_x = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Network1D_geometry_nodes_x_get(void * jarg1) {
  void * jresult ;
  ugridapi::Network1D *arg1 = (ugridapi::Network1D *) 0 ;
  double *result = 0 ;
  
  arg1 = (ugridapi::Network1D *)jarg1; 
  result = (double *) ((arg1)->geometry_nodes_x);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Network1D_geometry_nodes_y_set(void * jarg1, void * jarg2) {
  ugridapi::Network1D *arg1 = (ugridapi::Network1D *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (ugridapi::Network1D *)jarg1; 
  arg2 = (double *)jarg2; 
  if (arg1) (arg1)->geometry_nodes_y = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Network1D_geometry_nodes_y_get(void * jarg1) {
  void * jresult ;
  ugridapi::Network1D *arg1 = (ugridapi::Network1D *) 0 ;
  double *result = 0 ;
  
  arg1 = (ugridapi::Network1D *)jarg1; 
  result = (double *) ((arg1)->geometry_nodes_y);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Network1D_num_edge_geometry_nodes_set(void * jarg1, void * jarg2) {
  ugridapi::Network1D *arg1 = (ugridapi::Network1D *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (ugridapi::Network1D *)jarg1; 
  arg2 = (int *)jarg2; 
  if (arg1) (arg1)->num_edge_geometry_nodes = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Network1D_num_edge_geometry_nodes_get(void * jarg1) {
  void * jresult ;
  ugridapi::Network1D *arg1 = (ugridapi::Network1D *) 0 ;
  int *result = 0 ;
  
  arg1 = (ugridapi::Network1D *)jarg1; 
  result = (int *) ((arg1)->num_edge_geometry_nodes);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Network1D_num_geometry_nodes_set(void * jarg1, int jarg2) {
  ugridapi::Network1D *arg1 = (ugridapi::Network1D *) 0 ;
  int arg2 ;
  
  arg1 = (ugridapi::Network1D *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_geometry_nodes = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Network1D_num_geometry_nodes_get(void * jarg1) {
  int jresult ;
  ugridapi::Network1D *arg1 = (ugridapi::Network1D *) 0 ;
  int result;
  
  arg1 = (ugridapi::Network1D *)jarg1; 
  result = (int) ((arg1)->num_geometry_nodes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Network1D_num_nodes_set(void * jarg1, int jarg2) {
  ugridapi::Network1D *arg1 = (ugridapi::Network1D *) 0 ;
  int arg2 ;
  
  arg1 = (ugridapi::Network1D *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_nodes = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Network1D_num_nodes_get(void * jarg1) {
  int jresult ;
  ugridapi::Network1D *arg1 = (ugridapi::Network1D *) 0 ;
  int result;
  
  arg1 = (ugridapi::Network1D *)jarg1; 
  result = (int) ((arg1)->num_nodes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Network1D_num_edges_set(void * jarg1, int jarg2) {
  ugridapi::Network1D *arg1 = (ugridapi::Network1D *) 0 ;
  int arg2 ;
  
  arg1 = (ugridapi::Network1D *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_edges = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Network1D_num_edges_get(void * jarg1) {
  int jresult ;
  ugridapi::Network1D *arg1 = (ugridapi::Network1D *) 0 ;
  int result;
  
  arg1 = (ugridapi::Network1D *)jarg1; 
  result = (int) ((arg1)->num_edges);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Network1D_is_spherical_set(void * jarg1, int jarg2) {
  ugridapi::Network1D *arg1 = (ugridapi::Network1D *) 0 ;
  int arg2 ;
  
  arg1 = (ugridapi::Network1D *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->is_spherical = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Network1D_is_spherical_get(void * jarg1) {
  int jresult ;
  ugridapi::Network1D *arg1 = (ugridapi::Network1D *) 0 ;
  int result;
  
  arg1 = (ugridapi::Network1D *)jarg1; 
  result = (int) ((arg1)->is_spherical);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Network1D_start_index_set(void * jarg1, int jarg2) {
  ugridapi::Network1D *arg1 = (ugridapi::Network1D *) 0 ;
  int arg2 ;
  
  arg1 = (ugridapi::Network1D *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->start_index = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Network1D_start_index_get(void * jarg1) {
  int jresult ;
  ugridapi::Network1D *arg1 = (ugridapi::Network1D *) 0 ;
  int result;
  
  arg1 = (ugridapi::Network1D *)jarg1; 
  result = (int) ((arg1)->start_index);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Network1D() {
  void * jresult ;
  ugridapi::Network1D *result = 0 ;
  
  result = (ugridapi::Network1D *)new ugridapi::Network1D();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Network1D(void * jarg1) {
  ugridapi::Network1D *arg1 = (ugridapi::Network1D *) 0 ;
  
  arg1 = (ugridapi::Network1D *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UGridState__SWIG_0() {
  void * jresult ;
  ugridapi::UGridState *result = 0 ;
  
  result = (ugridapi::UGridState *)new ugridapi::UGridState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UGridState__SWIG_1(void * jarg1) {
  void * jresult ;
  std::shared_ptr< netCDF::NcFile > *arg1 = 0 ;
  ugridapi::UGridState *result = 0 ;
  
  arg1 = (std::shared_ptr< netCDF::NcFile > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::shared_ptr< netCDF::NcFile > const & is null", 0);
    return 0;
  } 
  result = (ugridapi::UGridState *)new ugridapi::UGridState((std::shared_ptr< netCDF::NcFile > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UGridState_m_ncFile_set(void * jarg1, void * jarg2) {
  ugridapi::UGridState *arg1 = (ugridapi::UGridState *) 0 ;
  std::shared_ptr< netCDF::NcFile > *arg2 = (std::shared_ptr< netCDF::NcFile > *) 0 ;
  
  arg1 = (ugridapi::UGridState *)jarg1; 
  arg2 = (std::shared_ptr< netCDF::NcFile > *)jarg2; 
  if (arg1) (arg1)->m_ncFile = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UGridState_m_ncFile_get(void * jarg1) {
  void * jresult ;
  ugridapi::UGridState *arg1 = (ugridapi::UGridState *) 0 ;
  std::shared_ptr< netCDF::NcFile > *result = 0 ;
  
  arg1 = (ugridapi::UGridState *)jarg1; 
  result = (std::shared_ptr< netCDF::NcFile > *)& ((arg1)->m_ncFile);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UGridState_m_mesh1d_set(void * jarg1, void * jarg2) {
  ugridapi::UGridState *arg1 = (ugridapi::UGridState *) 0 ;
  std::vector< ugrid::Mesh1D > *arg2 = (std::vector< ugrid::Mesh1D > *) 0 ;
  
  arg1 = (ugridapi::UGridState *)jarg1; 
  arg2 = (std::vector< ugrid::Mesh1D > *)jarg2; 
  if (arg1) (arg1)->m_mesh1d = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UGridState_m_mesh1d_get(void * jarg1) {
  void * jresult ;
  ugridapi::UGridState *arg1 = (ugridapi::UGridState *) 0 ;
  std::vector< ugrid::Mesh1D > *result = 0 ;
  
  arg1 = (ugridapi::UGridState *)jarg1; 
  result = (std::vector< ugrid::Mesh1D > *)& ((arg1)->m_mesh1d);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UGridState_m_network1d_set(void * jarg1, void * jarg2) {
  ugridapi::UGridState *arg1 = (ugridapi::UGridState *) 0 ;
  std::vector< ugrid::Network1D > *arg2 = (std::vector< ugrid::Network1D > *) 0 ;
  
  arg1 = (ugridapi::UGridState *)jarg1; 
  arg2 = (std::vector< ugrid::Network1D > *)jarg2; 
  if (arg1) (arg1)->m_network1d = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UGridState_m_network1d_get(void * jarg1) {
  void * jresult ;
  ugridapi::UGridState *arg1 = (ugridapi::UGridState *) 0 ;
  std::vector< ugrid::Network1D > *result = 0 ;
  
  arg1 = (ugridapi::UGridState *)jarg1; 
  result = (std::vector< ugrid::Network1D > *)& ((arg1)->m_network1d);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UGridState_m_mesh2d_set(void * jarg1, void * jarg2) {
  ugridapi::UGridState *arg1 = (ugridapi::UGridState *) 0 ;
  std::vector< ugrid::Mesh2D > *arg2 = (std::vector< ugrid::Mesh2D > *) 0 ;
  
  arg1 = (ugridapi::UGridState *)jarg1; 
  arg2 = (std::vector< ugrid::Mesh2D > *)jarg2; 
  if (arg1) (arg1)->m_mesh2d = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UGridState_m_mesh2d_get(void * jarg1) {
  void * jresult ;
  ugridapi::UGridState *arg1 = (ugridapi::UGridState *) 0 ;
  std::vector< ugrid::Mesh2D > *result = 0 ;
  
  arg1 = (ugridapi::UGridState *)jarg1; 
  result = (std::vector< ugrid::Mesh2D > *)& ((arg1)->m_mesh2d);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UGridState_m_contacts_set(void * jarg1, void * jarg2) {
  ugridapi::UGridState *arg1 = (ugridapi::UGridState *) 0 ;
  std::vector< ugrid::Contacts > *arg2 = (std::vector< ugrid::Contacts > *) 0 ;
  
  arg1 = (ugridapi::UGridState *)jarg1; 
  arg2 = (std::vector< ugrid::Contacts > *)jarg2; 
  if (arg1) (arg1)->m_contacts = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UGridState_m_contacts_get(void * jarg1) {
  void * jresult ;
  ugridapi::UGridState *arg1 = (ugridapi::UGridState *) 0 ;
  std::vector< ugrid::Contacts > *result = 0 ;
  
  arg1 = (ugridapi::UGridState *)jarg1; 
  result = (std::vector< ugrid::Contacts > *)& ((arg1)->m_contacts);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UGridState_set_dimension(void * jarg1, const char * jarg2, int jarg3) {
  ugridapi::UGridState *arg1 = (ugridapi::UGridState *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (ugridapi::UGridState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  (arg1)->set_dimension((std::string const &)*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UGridState_get_dimension(void * jarg1, const char * jarg2) {
  void * jresult ;
  ugridapi::UGridState *arg1 = (ugridapi::UGridState *) 0 ;
  std::string *arg2 = 0 ;
  netCDF::NcDim result;
  
  arg1 = (ugridapi::UGridState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = ((ugridapi::UGridState const *)arg1)->get_dimension((std::string const &)*arg2);
  jresult = new netCDF::NcDim(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UGridState(void * jarg1) {
  ugridapi::UGridState *arg1 = (ugridapi::UGridState *) 0 ;
  
  arg1 = (ugridapi::UGridState *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_locations_attribute_names_set(void * jarg1) {
  std::unordered_map< ugridapi::MeshLocations,std::string,std::hash< ugridapi::MeshLocations > > *arg1 = (std::unordered_map< ugridapi::MeshLocations,std::string,std::hash< ugridapi::MeshLocations > > *) 0 ;
  
  arg1 = (std::unordered_map< ugridapi::MeshLocations,std::string,std::hash< ugridapi::MeshLocations > > *)jarg1; 
  ugridapi::locations_attribute_names = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_locations_attribute_names_get() {
  void * jresult ;
  std::unordered_map< ugridapi::MeshLocations,std::string,std::hash< ugridapi::MeshLocations > > *result = 0 ;
  
  result = (std::unordered_map< ugridapi::MeshLocations,std::string,std::hash< ugridapi::MeshLocations > > *)&ugridapi::locations_attribute_names;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_locations_ugrid_dimensions_set(void * jarg1) {
  std::unordered_map< ugridapi::MeshLocations,ugrid::UGridFileDimensions,std::hash< ugridapi::MeshLocations > > *arg1 = (std::unordered_map< ugridapi::MeshLocations,ugrid::UGridFileDimensions,std::hash< ugridapi::MeshLocations > > *) 0 ;
  
  arg1 = (std::unordered_map< ugridapi::MeshLocations,ugrid::UGridFileDimensions,std::hash< ugridapi::MeshLocations > > *)jarg1; 
  ugridapi::locations_ugrid_dimensions = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_locations_ugrid_dimensions_get() {
  void * jresult ;
  std::unordered_map< ugridapi::MeshLocations,ugrid::UGridFileDimensions,std::hash< ugridapi::MeshLocations > > *result = 0 ;
  
  result = (std::unordered_map< ugridapi::MeshLocations,ugrid::UGridFileDimensions,std::hash< ugridapi::MeshLocations > > *)&ugridapi::locations_ugrid_dimensions;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_error_get(char * jarg1) {
  int jresult ;
  char **arg1 = 0 ;
  char *temp1 = 0 ;
  int result;
  
  
  temp1 = (char *)jarg1;
  arg1 = &temp1;
  
  result = (int)ugridapi::ug_error_get((char const *&)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_name_get_length(int * jarg1) {
  int jresult ;
  int *arg1 = 0 ;
  int result;
  
  arg1 = (int *)jarg1; 
  result = (int)ugridapi::ug_name_get_length(*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_name_get_long_length(int * jarg1) {
  int jresult ;
  int *arg1 = 0 ;
  int result;
  
  arg1 = (int *)jarg1; 
  result = (int)ugridapi::ug_name_get_long_length(*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_entity_get_node_location_enum(int * jarg1) {
  int jresult ;
  int *arg1 = 0 ;
  int result;
  
  arg1 = (int *)jarg1; 
  result = (int)ugridapi::ug_entity_get_node_location_enum(*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_entity_get_edge_location_enum(int * jarg1) {
  int jresult ;
  int *arg1 = 0 ;
  int result;
  
  arg1 = (int *)jarg1; 
  result = (int)ugridapi::ug_entity_get_edge_location_enum(*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_entity_get_face_location_enum(int * jarg1) {
  int jresult ;
  int *arg1 = 0 ;
  int result;
  
  arg1 = (int *)jarg1; 
  result = (int)ugridapi::ug_entity_get_face_location_enum(*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_topology_get_network1d_enum(int * jarg1) {
  int jresult ;
  int *arg1 = 0 ;
  int result;
  
  arg1 = (int *)jarg1; 
  result = (int)ugridapi::ug_topology_get_network1d_enum(*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_topology_get_mesh1d_enum(int * jarg1) {
  int jresult ;
  int *arg1 = 0 ;
  int result;
  
  arg1 = (int *)jarg1; 
  result = (int)ugridapi::ug_topology_get_mesh1d_enum(*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_topology_get_mesh2d_enum(int * jarg1) {
  int jresult ;
  int *arg1 = 0 ;
  int result;
  
  arg1 = (int *)jarg1; 
  result = (int)ugridapi::ug_topology_get_mesh2d_enum(*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_topology_get_contacts_enum(int * jarg1) {
  int jresult ;
  int *arg1 = 0 ;
  int result;
  
  arg1 = (int *)jarg1; 
  result = (int)ugridapi::ug_topology_get_contacts_enum(*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_topology_get_count(int jarg1, int jarg2, int * jarg3) {
  int jresult ;
  int arg1 ;
  int arg2 ;
  int *arg3 = 0 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  result = (int)ugridapi::ug_topology_get_count(arg1,arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_topology_count_data_variables(int jarg1, int jarg2, int jarg3, int jarg4, int * jarg5) {
  int jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int *arg5 = 0 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int *)jarg5; 
  result = (int)ugridapi::ug_topology_count_data_variables(arg1,arg2,arg3,arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_topology_get_data_variables_names(int jarg1, int jarg2, int jarg3, int jarg4, char * jarg5) {
  int jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char *)jarg5; 
  result = (int)ugridapi::ug_topology_get_data_variables_names(arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_topology_define_double_variable_on_location(int jarg1, int jarg2, int jarg3, int jarg4, char * jarg5, char * jarg6, int jarg7) {
  int jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  int arg7 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (int)jarg7; 
  result = (int)ugridapi::ug_topology_define_double_variable_on_location(arg1,arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_variable_count_attributes(int jarg1, char * jarg2, int * jarg3) {
  int jresult ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = 0 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int *)jarg3; 
  result = (int)ugridapi::ug_variable_count_attributes(arg1,(char const *)arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_variable_get_attributes_values(int jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (int)ugridapi::ug_variable_get_attributes_values(arg1,(char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_variable_get_attributes_names(int jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (int)ugridapi::ug_variable_get_attributes_names(arg1,(char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_variable_count_dimensions(int jarg1, char * jarg2, int * jarg3) {
  int jresult ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = 0 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int *)jarg3; 
  result = (int)ugridapi::ug_variable_count_dimensions(arg1,(char const *)arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_variable_get_data_dimensions(int jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = (int *) 0 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int *)jarg3; 
  result = (int)ugridapi::ug_variable_get_data_dimensions(arg1,(char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_variable_get_data_double(int jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  double *arg3 = (double *) 0 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (double *)jarg3; 
  result = (int)ugridapi::ug_variable_get_data_double(arg1,(char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_variable_get_data_int(int jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = (int *) 0 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int *)jarg3; 
  result = (int)ugridapi::ug_variable_get_data_int(arg1,(char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_variable_get_data_char(int jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (int)ugridapi::ug_variable_get_data_char(arg1,(char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_file_read_mode(int * jarg1) {
  int jresult ;
  int *arg1 = 0 ;
  int result;
  
  arg1 = (int *)jarg1; 
  result = (int)ugridapi::ug_file_read_mode(*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_file_write_mode(int * jarg1) {
  int jresult ;
  int *arg1 = 0 ;
  int result;
  
  arg1 = (int *)jarg1; 
  result = (int)ugridapi::ug_file_write_mode(*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_file_replace_mode(int * jarg1) {
  int jresult ;
  int *arg1 = 0 ;
  int result;
  
  arg1 = (int *)jarg1; 
  result = (int)ugridapi::ug_file_replace_mode(*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_file_open(char * jarg1, int jarg2, int * jarg3) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  result = (int)ugridapi::ug_file_open((char const *)arg1,arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_file_close(int jarg1) {
  int jresult ;
  int arg1 ;
  int result;
  
  arg1 = (int)jarg1; 
  result = (int)ugridapi::ug_file_close(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_network1d_def(int jarg1, void * jarg2, int * jarg3) {
  int jresult ;
  int arg1 ;
  ugridapi::Network1D *arg2 = 0 ;
  int *arg3 = 0 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (ugridapi::Network1D *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ugridapi::Network1D const & is null", 0);
    return 0;
  } 
  arg3 = (int *)jarg3; 
  result = (int)ugridapi::ug_network1d_def(arg1,(ugridapi::Network1D const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_network1d_put(int jarg1, int jarg2, void * jarg3) {
  int jresult ;
  int arg1 ;
  int arg2 ;
  ugridapi::Network1D *arg3 = 0 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ugridapi::Network1D *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ugridapi::Network1D const & is null", 0);
    return 0;
  } 
  result = (int)ugridapi::ug_network1d_put(arg1,arg2,(ugridapi::Network1D const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_network1d_inq(int jarg1, int jarg2, void * jarg3) {
  int jresult ;
  int arg1 ;
  int arg2 ;
  ugridapi::Network1D *arg3 = 0 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ugridapi::Network1D *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ugridapi::Network1D & is null", 0);
    return 0;
  } 
  result = (int)ugridapi::ug_network1d_inq(arg1,arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_network1d_get(int jarg1, int jarg2, void * jarg3) {
  int jresult ;
  int arg1 ;
  int arg2 ;
  ugridapi::Network1D *arg3 = 0 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ugridapi::Network1D *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ugridapi::Network1D & is null", 0);
    return 0;
  } 
  result = (int)ugridapi::ug_network1d_get(arg1,arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_mesh1d_def(int jarg1, void * jarg2, int * jarg3) {
  int jresult ;
  int arg1 ;
  ugridapi::Mesh1D *arg2 = 0 ;
  int *arg3 = 0 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (ugridapi::Mesh1D *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ugridapi::Mesh1D const & is null", 0);
    return 0;
  } 
  arg3 = (int *)jarg3; 
  result = (int)ugridapi::ug_mesh1d_def(arg1,(ugridapi::Mesh1D const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_mesh1d_put(int jarg1, int jarg2, void * jarg3) {
  int jresult ;
  int arg1 ;
  int arg2 ;
  ugridapi::Mesh1D *arg3 = 0 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ugridapi::Mesh1D *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ugridapi::Mesh1D const & is null", 0);
    return 0;
  } 
  result = (int)ugridapi::ug_mesh1d_put(arg1,arg2,(ugridapi::Mesh1D const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_mesh1d_inq(int jarg1, int jarg2, void * jarg3) {
  int jresult ;
  int arg1 ;
  int arg2 ;
  ugridapi::Mesh1D *arg3 = 0 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ugridapi::Mesh1D *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ugridapi::Mesh1D & is null", 0);
    return 0;
  } 
  result = (int)ugridapi::ug_mesh1d_inq(arg1,arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_mesh1d_get(int jarg1, int jarg2, void * jarg3) {
  int jresult ;
  int arg1 ;
  int arg2 ;
  ugridapi::Mesh1D *arg3 = 0 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ugridapi::Mesh1D *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ugridapi::Mesh1D & is null", 0);
    return 0;
  } 
  result = (int)ugridapi::ug_mesh1d_get(arg1,arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_mesh2d_def(int jarg1, void * jarg2, int * jarg3) {
  int jresult ;
  int arg1 ;
  ugridapi::Mesh2D *arg2 = 0 ;
  int *arg3 = 0 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (ugridapi::Mesh2D *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ugridapi::Mesh2D const & is null", 0);
    return 0;
  } 
  arg3 = (int *)jarg3; 
  result = (int)ugridapi::ug_mesh2d_def(arg1,(ugridapi::Mesh2D const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_mesh2d_put(int jarg1, int jarg2, void * jarg3) {
  int jresult ;
  int arg1 ;
  int arg2 ;
  ugridapi::Mesh2D *arg3 = 0 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ugridapi::Mesh2D *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ugridapi::Mesh2D const & is null", 0);
    return 0;
  } 
  result = (int)ugridapi::ug_mesh2d_put(arg1,arg2,(ugridapi::Mesh2D const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_mesh2d_inq(int jarg1, int jarg2, void * jarg3) {
  int jresult ;
  int arg1 ;
  int arg2 ;
  ugridapi::Mesh2D *arg3 = 0 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ugridapi::Mesh2D *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ugridapi::Mesh2D & is null", 0);
    return 0;
  } 
  result = (int)ugridapi::ug_mesh2d_inq(arg1,arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_mesh2d_get(int jarg1, int jarg2, void * jarg3) {
  int jresult ;
  int arg1 ;
  int arg2 ;
  ugridapi::Mesh2D *arg3 = 0 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ugridapi::Mesh2D *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ugridapi::Mesh2D & is null", 0);
    return 0;
  } 
  result = (int)ugridapi::ug_mesh2d_get(arg1,arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_contacts_def(int jarg1, void * jarg2, int * jarg3) {
  int jresult ;
  int arg1 ;
  ugridapi::Contacts *arg2 = 0 ;
  int *arg3 = 0 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (ugridapi::Contacts *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ugridapi::Contacts const & is null", 0);
    return 0;
  } 
  arg3 = (int *)jarg3; 
  result = (int)ugridapi::ug_contacts_def(arg1,(ugridapi::Contacts const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_contacts_put(int jarg1, int jarg2, void * jarg3) {
  int jresult ;
  int arg1 ;
  int arg2 ;
  ugridapi::Contacts *arg3 = 0 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ugridapi::Contacts *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ugridapi::Contacts const & is null", 0);
    return 0;
  } 
  result = (int)ugridapi::ug_contacts_put(arg1,arg2,(ugridapi::Contacts const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_contacts_inq(int jarg1, int jarg2, void * jarg3) {
  int jresult ;
  int arg1 ;
  int arg2 ;
  ugridapi::Contacts *arg3 = 0 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ugridapi::Contacts *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ugridapi::Contacts & is null", 0);
    return 0;
  } 
  result = (int)ugridapi::ug_contacts_inq(arg1,arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_contacts_get(int jarg1, int jarg2, void * jarg3) {
  int jresult ;
  int arg1 ;
  int arg2 ;
  ugridapi::Contacts *arg3 = 0 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ugridapi::Contacts *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ugridapi::Contacts & is null", 0);
    return 0;
  } 
  result = (int)ugridapi::ug_contacts_get(arg1,arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_variable_int_define(int jarg1, char * jarg2) {
  int jresult ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)ugridapi::ug_variable_int_define(arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_attribute_int_define(int jarg1, char * jarg2, char * jarg3, void * jarg4, int jarg5) {
  int jresult ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)ugridapi::ug_attribute_int_define(arg1,(char const *)arg2,(char const *)arg3,(int const *)arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_attribute_char_define(int jarg1, char * jarg2, char * jarg3, char * jarg4, int jarg5) {
  int jresult ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)ugridapi::ug_attribute_char_define(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_attribute_double_define(int jarg1, char * jarg2, char * jarg3, void * jarg4, int jarg5) {
  int jresult ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  double *arg4 = (double *) 0 ;
  int arg5 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (double *)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)ugridapi::ug_attribute_double_define(arg1,(char const *)arg2,(char const *)arg3,(double const *)arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_attribute_global_char_define(int jarg1, char * jarg2, char * jarg3, int jarg4) {
  int jresult ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)ugridapi::ug_attribute_global_char_define(arg1,(char const *)arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_get_edges_location_type(int * jarg1) {
  int jresult ;
  int *arg1 = 0 ;
  int result;
  
  arg1 = (int *)jarg1; 
  result = (int)ugridapi::ug_get_edges_location_type(*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_get_nodes_location_type(int * jarg1) {
  int jresult ;
  int *arg1 = 0 ;
  int result;
  
  arg1 = (int *)jarg1; 
  result = (int)ugridapi::ug_get_nodes_location_type(*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_get_faces_location_type(int * jarg1) {
  int jresult ;
  int *arg1 = 0 ;
  int result;
  
  arg1 = (int *)jarg1; 
  result = (int)ugridapi::ug_get_faces_location_type(*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_get_int_fill_value(int * jarg1) {
  int jresult ;
  int *arg1 = 0 ;
  int result;
  
  arg1 = (int *)jarg1; 
  result = (int)ugridapi::ug_get_int_fill_value(*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ug_get_double_fill_value(double * jarg1) {
  int jresult ;
  double *arg1 = 0 ;
  int result;
  
  arg1 = (double *)jarg1; 
  result = (int)ugridapi::ug_get_double_fill_value(*arg1);
  jresult = result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

